{"version":3,"file":"static/js/839.5530a5b3.chunk.js","mappings":"iMAIaA,EAAiB,kBAAMC,EAAAA,EAAAA,OACvBC,EAAkDC,EAAAA,G,kBCkB/D,GAXkCC,EAAAA,EAAAA,OAAK,YAAiC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAClD,OACE,iBAAKC,UAAS,eAAUD,GAAgB,eAAxC,WACE,SAAC,KAAD,CAASE,GAAIH,EAASI,OAAtB,UACE,gBAAKF,UAAU,cAAcG,IAAKL,EAASM,KAAMC,IAAKP,EAASQ,UAEjE,eAAIN,UAAU,cAAd,SAA6BF,EAASQ,a,SC8B5C,EA3CgC,WAC9B,IAAMC,EAAWd,IACXe,GAAWC,EAAAA,EAAAA,QAAyB,MAC1C,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACRP,EAASQ,SAAWR,EAASQ,QAAQC,UACpC,KAEHF,EAAAA,EAAAA,YAAU,WAERF,GAAgBN,GAASW,EAAAA,EAAAA,GAAe,CAAEP,WAAAA,OACzC,CAACA,IAWJ,OACE,iBAAKX,UAAU,SAAf,WACE,kBACEA,UAAS,yBAAoBa,GAAgB,yBAC7CM,MAAOR,EACPS,SAb2D,SAACC,GAEhEP,EADc,eACQQ,KAAKD,EAAEE,OAAOJ,QACpCP,EAAcS,EAAEE,OAAOJ,QAWnBK,IAAKhB,EACLiB,YAAY,mCAEd,iBACEzB,UAAS,yBAAoBa,GAAgB,yBAC7Ca,QAAS,kBAAMd,EAAc,KAF/B,gBAKEC,IAAgB,iBAAMb,UAAU,kBAAhB,gDC+BxB,EA9C0B,WACPP,IAAjB,IACQS,GAAWyB,EAAAA,EAAAA,MAAXzB,OAIF0B,EAAYjC,GAAe,SAAAkC,GAAK,OAAIA,EAAMD,UAAUE,uBAC1D,GAAwCpB,EAAAA,EAAAA,WAAS,GAAjD,eAAOX,EAAP,KAAqBgC,EAArB,KAWA,OATAhB,EAAAA,EAAAA,YAAU,WACRgB,IAAkB7B,KACjB,CAACA,KAQF,iBAAKF,UAAU,UAAf,WACE,iBAAKA,UAAS,+BAA0BD,GAAgB,8BAAxD,WACE,eAAIC,UAAU,iBAAd,sBACA,SAAC,EAAD,QAGF,iBAAKA,UAAU,mBAAf,WAIE,gBAAKA,UAAS,8BAAyBD,GAAgB,6BAAvD,SAEI6B,EAAUI,KAAI,SAAAC,GAAC,OACb,SAAC,EAAD,CAAMnC,SAAUmC,EAAGlC,aAAcA,GAAmBkC,EAAE/B,aAI1DH,IACA,gBAAKC,UAAU,wBAAf,UACE,SAAC,KAAD","sources":["hooks/index.ts","components/Card/Card.tsx","components/PictureSearch/PictureSearch.tsx","components/Gallery/Gallery.tsx"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootState, AppDispatch } from '../store';\r\n\r\n// приложение будет знать о всех событиях и корректно определять их тип ->\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector // связали со стейтом","import { memo } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport './Card.scss'\r\nimport { PaintingData } from '../../types/variables'\r\n\r\ntype CardProps = {\r\n  painting: PaintingData,\r\n  isOutletOpen: boolean\r\n}\r\n\r\n\r\nconst Card: React.FC<CardProps> = memo(({ painting, isOutletOpen }) => {\r\n  return (\r\n    <div className={`card ${isOutletOpen && 'card__shift'}`}>\r\n      <NavLink to={painting.cardId}>\r\n        <img className='card__image' src={painting.link} alt={painting.name} />\r\n      </NavLink>\r\n      <h4 className='card__title'>{painting.name}</h4>\r\n    </div >\r\n  )\r\n})\r\n\r\nexport default Card\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport { useAppDispatch } from '../../hooks'\r\nimport './PictureSearch.scss'\r\nimport { searchPainting } from '../../store/paintingSlice'\r\n\r\nconst PictureSearch: React.FC = () => {\r\n  const dispatch = useAppDispatch()\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n  const [inputValue, setInputValue] = useState('')\r\n  const [isInputValid, setIsInputValid] = useState(true)\r\n\r\n  useEffect(() => {\r\n    inputRef.current && inputRef.current.focus()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // ф-я dispatch принимает событие и данные\r\n    isInputValid && dispatch(searchPainting({ inputValue })) // в action только 1 параметр => объектом\r\n  }, [inputValue])\r\n\r\n\r\n  const handleCgange: React.ChangeEventHandler<HTMLInputElement> = (e): void => {\r\n    const regex = /^[a-zA-Z]*$/g\r\n    setIsInputValid(regex.test(e.target.value))\r\n    setInputValue(e.target.value)\r\n    // тип - навести на элементе на onChange (работает для форм)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='search'>\r\n      <input\r\n        className={`search__input ${!isInputValid && 'search__input_warning'}`}\r\n        value={inputValue}\r\n        onChange={handleCgange}\r\n        ref={inputRef}\r\n        placeholder='Searching - start typing here'\r\n      />\r\n      <span\r\n        className={`search__close ${!isInputValid && 'search__close_warning'}`}\r\n        onClick={() => setInputValue('')}>\r\n        +\r\n      </span>\r\n      {!isInputValid && <span className='search__warning'>field can only contain letters</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PictureSearch\r\n","import { memo, useEffect, useState } from 'react'\r\nimport { Outlet, useParams, useLocation } from 'react-router-dom'\r\nimport { useAppSelector, useAppDispatch } from '../../hooks'\r\n\r\nimport './Gallery.scss'\r\nimport Card from '../Card/Card'\r\nimport PictureSearch from '../PictureSearch/PictureSearch'\r\n// import { PaintingData } from '../../types/variables'\r\n// import { fetchPaintings } from '../../store/paintingSlice'\r\n\r\n// import dali from '../../assets/images/mock/dali.jpg'\r\n// import endy from '../../assets/images/mock/endy.webp'\r\n// import monet from '../../assets/images/mock/monet.jpg'\r\n// import raffael from '../../assets/images/mock/raffael.jpg'\r\n// import rembrandt from '../../assets/images/mock/rembrandt.jpg'\r\n// import vanGog from '../../assets/images/mock/van-gog.jpg'\r\n// import sun from '../../assets/images/mock/sun.png'\r\n\r\n// const paintings: PaintingData[] = [ // потом добавить как для пропсов\r\n//   { name: 'Dali', link: dali, cardId: 'dali' },\r\n//   { name: 'Monet', link: monet, cardId: 'monet' },\r\n//   { name: 'Raffael', link: raffael, cardId: 'raffael' },\r\n//   { name: 'VanGog', link: vanGog, cardId: 'van-gog' },\r\n//   { name: 'Rembrandt', link: rembrandt, cardId: 'rembrandt' },\r\n//   { name: 'Sun', link: sun, cardId: 'sun' },\r\n//   { name: 'Endy', link: endy, cardId: 'endy' },\r\n// ]\r\n\r\nconst Gallery: React.FC = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { cardId } = useParams()\r\n  // const {status, error} = useAppSelector(state => state.paintings)\r\n  // useSelector - доступ к данным стора (приним. стейт и ф-ю и возвр. тут в переменную)\r\n  \r\n  const paintings = useAppSelector(state => state.paintings.paintingsRenderList)\r\n  const [isOutletOpen, setIsOutletOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setIsOutletOpen(!!cardId)\r\n  }, [cardId])\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(fetchPaintings())\r\n  // }, [dispatch])\r\n\r\n\r\n  return (\r\n    <div className='gallery'>\r\n      <div className={`gallery__content-box ${isOutletOpen && 'gallery__content-box_shift'}`}>\r\n        <h1 className='gallery__title'>Gallery</h1>\r\n        <PictureSearch />\r\n      </div>\r\n\r\n      <div className='gallery__content' >\r\n        {/* {error && <h2>Error - {error}</h2>}\r\n        {status && <h2>LOADING...</h2>} */}\r\n\r\n        <div className={`gallery__images-box ${isOutletOpen && 'gallery__images-box_shift'}`}>\r\n          {\r\n            paintings.map(c =>\r\n              <Card painting={c} isOutletOpen={isOutletOpen} key={c.cardId} />)\r\n          }\r\n        </div>\r\n        {\r\n          isOutletOpen &&\r\n          <div className=\"gallery__children-box\">\r\n            <Outlet />\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Gallery\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","memo","painting","isOutletOpen","className","to","cardId","src","link","alt","name","dispatch","inputRef","useRef","useState","inputValue","setInputValue","isInputValid","setIsInputValid","useEffect","current","focus","searchPainting","value","onChange","e","test","target","ref","placeholder","onClick","useParams","paintings","state","paintingsRenderList","setIsOutletOpen","map","c"],"sourceRoot":""}